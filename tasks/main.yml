---
- name: ensure {{ required_pip_libs | join(', ') }} is installed
  pip: { name: "{{ required_pip_libs }}", state: present, extra_args: --user }

- name: clean up from previous run
  file: path={{ ca_path }} state=absent
  when: clean_up

- name: ensure CA path exists - {{ ca_path }}
  file: path={{ ca_path }} state=directory

- name: ensure required folders exists
  file: path={{ ca_path }}/{{ item }} state=directory
  with_items:
    - newcerts
    - trusted-ca

- name: ensure service folders exists
  file: path={{ ca_path }}/{{ item.name }} state=directory
  with_items:
    - "{{ services }}"

- name: Ensure index.txt exists
  file: path={{ ca_path }}/index.txt state=touch
  changed_when: clean_up

- name: check if serial exists
  stat:
    path: "{{ ca_path }}/serial"
  register: serial_stat_result

- name: create serial
  shell: echo 1000\n > {{ ca_path }}/serial
  when: serial_stat_result.stat.exists == false

- name: send root.cnf
  template:
    src: root.cnf.j2
    dest: "{{ ca_path }}/root.cnf"

- name: create rootCA.key
  openssl_privatekey:
    path: "{{ ca_path }}/rootCA.key"
    force: "{{ clean_up }}"

- name: create rootCA.pem
  command: openssl req -x509 -new -nodes -key {{ ca_path }}/rootCA.key -extensions v3_ca -sha256 -days {{ expiration_days }} -out {{ ca_path }}/trusted-ca/rootCA.pem -subj "/CN={{ common_name }}" -config {{ ca_path }}/root.cnf

- name: send server.cnf
  template:
    src: server.cnf.j2
    dest: "{{ ca_path }}/server.cnf"

- name: create certificate requests for all services
  command: openssl req -out {{ ca_path }}/{{ item.name }}/{{ item.name }}.server.csr -newkey rsa:{{ rsa_key_length }} -nodes -keyout {{ ca_path }}/{{ item.name }}/{{ item.name }}.server.key -config {{ ca_path }}/server.cnf -subj "/C={{ country }}/ST={{ state }}/L={{ locality }}/O={{ organization }}/OU={{ organizational_unit }}/CN={{ item.name }}" -extensions {{ item.name }}
  with_items: "{{ services }}"

- name: sign certificates
  expect:
    command: openssl ca -extensions {{ item.name }} -days {{ expiration_days }} -notext -md sha256 -in {{ ca_path }}/{{ item.name }}/{{ item.name }}.server.csr -out {{ ca_path }}/{{ item.name }}/{{ item.name }}.server.crt -cert {{ ca_path }}/trusted-ca/rootCA.pem -keyfile {{ ca_path }}/rootCA.key -config {{ ca_path }}/server.cnf
    responses:
      "Sign the certificate?": "y"
      "1 out of 1 certificate requests certified, commit?": "y"
  with_items: "{{ services }}"

- name: convert to pkcs12
  command: openssl pkcs12 -export -in {{ ca_path }}/{{ item.name }}/{{ item.name }}.server.crt -inkey {{ ca_path }}/{{ item.name}}/{{ item.name }}.server.key -out {{ ca_path }}/{{ item.name }}/{{ item.name }}.server.p12 -name "{{ item.name }}" -passout pass:{{ keystore_password }}
  with_items: "{{ services }}"

- name: add server cert to server keystore
  expect:
    command: keytool -importkeystore -destkeystore {{ ca_path }}/{{ keystore_name }}.server -deststorepass {{ keystore_password }} -srckeystore {{ ca_path }}/{{ item.name }}/{{ item.name }}.server.p12 -srcstoretype PKCS12 -srcstorepass {{ keystore_password }}
    responses:
      "overwrite": "yes"
  with_items: "{{ services }}"

- name: send client.cnf
  template:
    src: client.cnf.j2
    dest: "{{ ca_path }}/client.cnf"

- name: create certificate requests for all services
  command: openssl req -out {{ ca_path }}/{{ item.name }}/{{ item.name }}.client.csr -newkey rsa:{{ rsa_key_length }} -nodes -keyout {{ ca_path }}/{{ item.name }}/{{ item.name }}.client.key -config {{ ca_path }}/client.cnf -subj "/C={{ country }}/ST={{ state }}/L={{ locality }}/O={{ organization }}/OU={{ organizational_unit }}/CN={{ item.name }}" -extensions {{ item.name }}
  with_items: "{{ services }}"

- name: sign certificates
  expect:
    command: openssl ca -extensions {{ item.name }} -days {{ expiration_days }} -notext -md sha256 -in {{ ca_path }}/{{ item.name }}/{{ item.name }}.client.csr -out {{ ca_path }}/{{ item.name }}/{{ item.name }}.client.crt -cert {{ ca_path }}/trusted-ca/rootCA.pem -keyfile {{ ca_path }}/rootCA.key -config {{ ca_path }}/client.cnf
    responses:
      "Sign the certificate?": "y"
      "1 out of 1 certificate requests certified, commit?": "y"
  with_items: "{{ services }}"

- name: convert to pkcs12
  command: openssl pkcs12 -export -in {{ ca_path }}/{{ item.name }}/{{ item.name }}.client.crt -inkey {{ ca_path }}/{{ item.name}}/{{ item.name }}.client.key -out {{ ca_path }}/{{ item.name }}/{{ item.name }}.client.p12 -name "{{ item.name }}" -passout pass:{{ keystore_password }}
  with_items: "{{ services }}"

- name: add client cert to client keystore
  expect:
    command: keytool -importkeystore -destkeystore {{ ca_path }}/{{ keystore_name }}.client -deststorepass {{ keystore_password }} -srckeystore {{ ca_path }}/{{ item.name }}/{{ item.name }}.client.p12 -srcstoretype PKCS12 -srcstorepass {{ keystore_password }}
    responses:
      "overwrite": "yes"
  with_items: "{{ services }}"

- name: copy provided trusted certificate authorities directory
  copy:
    src: "{{ trusted_ca_path }}/"
    dest: "{{ ca_path }}/trusted-ca"
  when: trusted_ca_path is defined

- name: check if {{ truststore_name }} exists
  stat:
    path: "{{ ca_path }}/{{ truststore_name }}"
  register: stat_result

- name: remove trusted certificates that will be imported again
  command: keytool -delete -keystore {{ ca_path }}/{{ truststore_name }} -alias '{{ item | regex_replace('.*\/', '')}}' -noprompt -storepass {{ keystore_password }}
  ignore_errors: yes
  with_fileglob: "{{ ca_path }}/trusted-ca/*"
  when: not clean_up and stat_result.stat.exists == true

- name: import provided trusted CA's to the truststore
  expect:
    command: keytool -import -file {{ item }} -alias {{ item | regex_replace('.*\/', '')}} -keystore {{ ca_path }}/{{ truststore_name }} -noprompt -v -storepass {{ keystore_password }}
    responses:
      "overwrite": "yes"
  with_fileglob: "{{ ca_path }}/trusted-ca/*"

- name: convert from jks to pkcs12 store
  expect:
    command: keytool -importkeystore -srckeystore {{ ca_path }}/{{ item }} -destkeystore {{ ca_path }}/{{ item }}.p12 -deststoretype pkcs12 -srcstorepass {{ keystore_password }} -deststorepass {{ keystore_password }}
    responses:
      "overwrite": "yes"
  with_items:
    - "{{ keystore_name }}.server"
    - "{{ keystore_name }}.client"
    - "{{ truststore_name }}"