---
- name: ensure pexists is installed
  pip: { name: pexpect, state: present, extra_args: --user }

- name: Clean up from previous run
  file: path={{ ca_path }} state=absent

- name: Ensure CA path exists - {{ ca_path }}
  file: path={{ ca_path }} state=directory

- name: Ensure required folders exists
  file: path={{ ca_path }}/{{ item }} state=directory
  with_items:
    - certs
    - crl
    - newcerts
    - private

- name: Ensure index.txt exists
  file: path={{ ca_path }}/index.txt state=touch

- name: Echo 1000 into serial
  shell: echo 1000\n > {{ ca_path }}/serial

- name: Send root.cnf
  template:
    src: root.cnf.j2
    dest: "{{ ca_path }}/root.cnf"

- name: Create rootCA.key
  shell: openssl genrsa -out {{ ca_path }}/rootCA.key 2048

- name: Create rootCA.pem
  shell: openssl req -x509 -new -nodes -key {{ ca_path }}/rootCA.key -extensions v3_ca -sha256 -days {{ expiration_days }} -out {{ ca_path }}/rootCA.pem -subj "/CN={{ common_name }}" -config {{ ca_path }}/root.cnf

- name: Create certificates requests for all services
  shell: openssl req -out {{ ca_path }}/{{ item.name }}.csr -newkey rsa:2048 -nodes -keyout {{ ca_path }}/{{ item.name }}.key -config {{ ca_path }}/root.cnf -subj "/C={{ country }}/ST={{ state }}/L={{ locality }}/O={{ organization }}/OU={{ organizational_unit }}/CN={{ item.name }}" -extensions {{ item.name }} & sleep {{ certs_sleep_duration }}
  with_items: "{{ services }}"

- name: Sign certificates
  expect:
    command: openssl ca -extensions {{ item.name }} -days {{ expiration_days }} -notext -md sha256 -in {{ ca_path }}/{{ item.name }}.csr -out {{ ca_path }}/{{ item.name }}.crt -cert {{ ca_path }}/rootCA.pem -keyfile {{ ca_path }}/rootCA.key -config {{ ca_path }}/root.cnf
    responses:
      "Sign the certificate?": "y"
      "1 out of 1 certificate requests certified, commit?": "y"
  with_items: "{{ services }}"

- name: ensure pem exists
  file: path={{ ca_path }}/{{ item.name }}.pem state=touch
  with_items: "{{ services }}"

- name: package key and crt
  shell: cat {{ ca_path}}/{{ item.name }}.key >>  {{ ca_path }}/{{ item.name }}.pem & cat {{ ca_path }}/{{ item.name }}.crt >> {{ ca_path }}/{{ item.name }}.pem
  with_items: "{{ services }}"

- name: ensure bundle.pem exists
  file: path={{ ca_path }}/bundle.pem state=touch

- name: create certificate bundle
  shell: cat {{ ca_path }}/{{ item.name }}.pem >> {{ ca_path }}/bundle.pem
  with_items: "{{ services }}"

- name: create pkcs12 keystore
  shell: openssl pkcs12 -export -in {{ ca_path }}/bundle.pem -out {{ ca_path }}/{{ keystore_name }}.p12 -name "{{ common_name }}" -passout pass:{{ keystore_password }}

- name: copy baltimore.ca.cert
  copy:
    src: trusted-certificates/crt/baltimore.ca.cert
    dest: "{{ ca_path }}/baltimore.ca.cert"

- name: Import CA's to the truststore
  shell: keytool -import -file {{ ca_path }}/{{ item }} -alias {{ item }} -keystore {{ ca_path }}/{{ truststore_name }} -noprompt -v -storepass {{ keystore_password }}
  with_items:
    - rootCA.pem
    - baltimore.ca.cert

- name: Convert from jks to pkcs12 store
  shell: keytool -importkeystore -srckeystore {{ ca_path }}/{{ item }} -destkeystore {{ ca_path }}/{{ item }}.p12 -deststoretype pkcs12 -srcstorepass {{ keystore_password }} -deststorepass {{ keystore_password }}
  with_items:
    - "{{ truststore_name }}"